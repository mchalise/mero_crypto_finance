{"version":3,"sources":["dbank2.png","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","web3","account","token","dbank","balance","dBankAddress","interestEarned","totalDeposits","totalMintedBankCoin","a","this","loadBlockchainData","dispatch","window","ethereum","Web3","eth","net","getId","netId","getAccounts","accounts","getBalance","setState","utils","fromWei","alert","Contract","Token","abi","networks","address","bankInfo","dBank","_address","methods","balanceOf","call","etherBalanceOf","totalSupply","totalMintedCoin","ethBalance","console","log","amount","deposit","send","value","toString","from","location","reload","e","preventDefault","withdraw","className","src","height","type","class","replace","role","Tabs","defaultActiveKey","id","Tab","eventKey","title","onSubmit","depositAmount","step","ref","input","placeholder","required","onClick","borrowAmount","borrow","payOff","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.154438c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dbank2.73567394.png\";","import { Tabs, Tab } from 'react-bootstrap'\nimport dBank from '../abis/dBank.json'\nimport React, { Component } from 'react';\nimport Token from '../abis/Token.json'\nimport dbank from '../dbank2.png';\nimport Web3 from 'web3';\nimport './App.css';\n\nclass App extends Component {\n\n  async componentWillMount() {    \n    await this.loadBlockchainData(this.props.dispatch)\n  }\n\n  async loadBlockchainData(dispatch) {\n    if(typeof window.ethereum !== 'undefined'){\n      const web3 = new Web3(window.ethereum)\n      const netId = await web3.eth.net.getId() \n      const accounts = await web3.eth.getAccounts()\n      const balance = await web3.eth.getBalance(accounts[0]) \n      if(typeof accounts[0] !=='undefined'){\n        this.setState({ account: accounts[0],web3: web3,balance: web3.utils.fromWei(balance)})\n      }else{\n        window.alert('Please connect MetaMask.')\n      }\n      try{\n        const token = new web3.eth.Contract(Token.abi, Token.networks[netId].address)\n        const bankInfo = new web3.eth.Contract(dBank.abi, dBank.networks[netId].address)\n        const dBankAddress = bankInfo._address\n        const interestEarned = await token.methods.balanceOf(this.state.account).call()\n        const totalDeposits = await bankInfo.methods.etherBalanceOf(this.state.account).call()\n        const totalMintedCoin = await token.methods.totalSupply().call()\n        const ethBalance = await new web3.eth.getBalance(this.state.account)\n        this.setState({\n          token: token, \n          dbank: bankInfo, \n          dBankAddress: dBankAddress, \n          interestEarned: web3.utils.fromWei(interestEarned),\n          totalDeposits: web3.utils.fromWei(totalDeposits),\n          totalMintedCoin: web3.utils.fromWei(totalMintedCoin),\n          ethBalance: web3.utils.fromWei(ethBalance)\n        })\n      }catch(e) {\n        console.log('Error', e)\n        window.alert('Contracts not deployed to the current network')\n      }\n    }else{\n      window.alert(\"Please Install MetaMask\")\n    }\n\n  }\n\n  async deposit(amount) {\n    if(this.state.dbank!=='undefined'){\n      try{\n        await this.state.dbank.methods.deposit().send({value: amount.toString(), from: this.state.account})\n        window.location.reload(false);\n      } catch (e) {\n        console.log('Error, deposit: ', e)\n      }\n    }\n  }\n\n  async withdraw(e) {\n    e.preventDefault()\n    if(this.state.dbank!=='undefined'){\n      try{\n        await this.state.dbank.methods.withdraw().send({from: this.state.account})\n        window.location.reload(false);\n      } catch(e) {\n        console.log('Error, withdraw: ', e)\n      }\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      web3: 'undefined',\n      account: '',\n      token: null,\n      dbank: null,\n      balance: 0,\n      dBankAddress: null,\n      interestEarned: 0,\n      totalDeposits: 0,  \n      totalMintedBankCoin: 0\n    }\n  }\n\n render() {\n    return (\n      <div className='text-monospace'>\n        <div className=\"container-fluid p-1 text-center\">\n          <div className=\"row d-flex justify-content-between border-bottom\">\n            <span><img src={dbank} height=\"100\"/></span> \n            <span className=\"mt-4\">\n              <h5>Welcome to <strong>मेरो</strong> Crypto Finance</h5>\n              <p>Total Supply(minted): <strong> {this.state.totalMintedCoin} MCF </strong></p>\n            </span> \n            <span className=\"mt-4 mr-2\">\n              <button type=\"button\" class=\"btn btn-sm btn-outline-dark mr-2\">{this.state.ethBalance} ETH</button>\n              <button type=\"button\" class=\"btn btn-sm btn-dark mr-2\">{this.state.account.replace(/(.{7})..+/, \"$1…\")}</button>\n            </span>            \n          </div>\n          <div className=\"row p-1\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n              <Tabs defaultActiveKey=\"deposit\" id=\"uncontrolled-tab-example\">\n                <Tab eventKey=\"deposit\" title=\"Deposit\">\n                  <div>\n                    <br></br>\n                    Total ETH Deposited: <strong> {this.state.totalDeposits} ETH</strong>\n                    <br></br>\n                    How much do you want to deposit?\n                    <br></br>\n                    (min. amount is 0.01 ETH)\n                    <br></br>\n                    (1 deposit is possible at the time)\n                    <br></br>\n                    <form onSubmit={(e) => {\n                      e.preventDefault()\n                      let amount = this.depositAmount.value\n                      amount = amount * 10**18 //convert to wei\n                      this.deposit(amount)\n                    }}>\n                      <div className='form-group mr-sm-2'>\n                      <br></br>\n                        <input\n                          id='depositAmount'\n                          step=\"0.01\"\n                          type='number'\n                          ref={(input) => { this.depositAmount = input }}\n                          className=\"form-control form-control-md\"\n                          placeholder='amount...'\n                          required />\n                      </div>\n                      <button type='submit' className='btn btn-primary'>DEPOSIT</button>\n                    </form>\n\n                  </div>\n                </Tab>\n                <Tab eventKey=\"withdraw\" title=\"Withdraw\">\n                  <br></br>\n                    Do you want to withdraw + take interest?\n                    <br></br>\n                    Total Claimed Reward: <strong> {this.state.interestEarned} MCF</strong>\n                    <br></br>\n                    <br></br>\n                  <div>\n                    <button type='submit' className='btn btn-primary' onClick={(e) => this.withdraw(e)}>WITHDRAW</button>\n                  </div>\n                </Tab>\n                <Tab eventKey=\"borrow\" title=\"Borrow\">\n                  <div>\n\n                  <br></br>\n                    Do you want to borrow tokens?\n                    <br></br>\n                    (You'll get 50% of collateral, in Tokens)\n                    <br></br>\n                    Type collateral amount (in ETH)\n                    <br></br>\n                    <br></br>\n                    <form onSubmit={(e) => {\n\n                      e.preventDefault()\n                      let amount = this.borrowAmount.value\n                      amount = amount * 10 **18 //convert to wei\n                      this.borrow(amount)\n                    }}>\n                      <div className='form-group mr-sm-2'>\n                        <input\n                          id='borrowAmount'\n                          step=\"0.01\"\n                          type='number'\n                          ref={(input) => { this.borrowAmount = input }}\n                          className=\"form-control form-control-md\"\n                          placeholder='amount...'\n                          required />\n                      </div>\n                      <button type='submit' className='btn btn-primary'>BORROW</button>\n                    </form>\n                  </div>\n                </Tab>\n                <Tab eventKey=\"payOff\" title=\"Payoff\">\n                  <div>\n\n                  <br></br>\n                    Do you want to payoff the loan?\n                    <br></br>\n                    (You'll receive your collateral - fee)\n                    <br></br>\n                    <br></br>\n                    <button type='submit' className='btn btn-primary' onClick={(e) => this.payOff(e)}>PAYOFF</button>\n                  </div>\n                </Tab>\n              </Tabs>\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}